// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.12
// source: user.proto

package user

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UserClient is the client API for User service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserClient interface {
	GetUserById(ctx context.Context, in *GetUserByIdIn, opts ...grpc.CallOption) (*GetUserOut, error)
	GetUserByEmail(ctx context.Context, in *GetUserByEmailIn, opts ...grpc.CallOption) (*GetUserOut, error)
	GetUserByName(ctx context.Context, in *GetUserByNameIn, opts ...grpc.CallOption) (*GetUserOut, error)
	GetUserBySession(ctx context.Context, in *SessionIdIn, opts ...grpc.CallOption) (*GetUserOut, error)
	RegisterUser(ctx context.Context, in *RegisterUserIn, opts ...grpc.CallOption) (*GetUserOut, error)
	UserLogin(ctx context.Context, in *LoginIn, opts ...grpc.CallOption) (*SessionOut, error)
	UserLogOut(ctx context.Context, in *SessionIdIn, opts ...grpc.CallOption) (*BoolOut, error)
	UserDebugLog(ctx context.Context, in *LogsIn, opts ...grpc.CallOption) (*BoolOut, error)
}

type userClient struct {
	cc grpc.ClientConnInterface
}

func NewUserClient(cc grpc.ClientConnInterface) UserClient {
	return &userClient{cc}
}

func (c *userClient) GetUserById(ctx context.Context, in *GetUserByIdIn, opts ...grpc.CallOption) (*GetUserOut, error) {
	out := new(GetUserOut)
	err := c.cc.Invoke(ctx, "/User/GetUserById", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByEmail(ctx context.Context, in *GetUserByEmailIn, opts ...grpc.CallOption) (*GetUserOut, error) {
	out := new(GetUserOut)
	err := c.cc.Invoke(ctx, "/User/GetUserByEmail", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserByName(ctx context.Context, in *GetUserByNameIn, opts ...grpc.CallOption) (*GetUserOut, error) {
	out := new(GetUserOut)
	err := c.cc.Invoke(ctx, "/User/GetUserByName", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) GetUserBySession(ctx context.Context, in *SessionIdIn, opts ...grpc.CallOption) (*GetUserOut, error) {
	out := new(GetUserOut)
	err := c.cc.Invoke(ctx, "/User/GetUserBySession", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) RegisterUser(ctx context.Context, in *RegisterUserIn, opts ...grpc.CallOption) (*GetUserOut, error) {
	out := new(GetUserOut)
	err := c.cc.Invoke(ctx, "/User/RegisterUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLogin(ctx context.Context, in *LoginIn, opts ...grpc.CallOption) (*SessionOut, error) {
	out := new(SessionOut)
	err := c.cc.Invoke(ctx, "/User/UserLogin", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserLogOut(ctx context.Context, in *SessionIdIn, opts ...grpc.CallOption) (*BoolOut, error) {
	out := new(BoolOut)
	err := c.cc.Invoke(ctx, "/User/UserLogOut", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userClient) UserDebugLog(ctx context.Context, in *LogsIn, opts ...grpc.CallOption) (*BoolOut, error) {
	out := new(BoolOut)
	err := c.cc.Invoke(ctx, "/User/UserDebugLog", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserServer is the server API for User service.
// All implementations must embed UnimplementedUserServer
// for forward compatibility
type UserServer interface {
	GetUserById(context.Context, *GetUserByIdIn) (*GetUserOut, error)
	GetUserByEmail(context.Context, *GetUserByEmailIn) (*GetUserOut, error)
	GetUserByName(context.Context, *GetUserByNameIn) (*GetUserOut, error)
	GetUserBySession(context.Context, *SessionIdIn) (*GetUserOut, error)
	RegisterUser(context.Context, *RegisterUserIn) (*GetUserOut, error)
	UserLogin(context.Context, *LoginIn) (*SessionOut, error)
	UserLogOut(context.Context, *SessionIdIn) (*BoolOut, error)
	UserDebugLog(context.Context, *LogsIn) (*BoolOut, error)
	mustEmbedUnimplementedUserServer()
}

// UnimplementedUserServer must be embedded to have forward compatible implementations.
type UnimplementedUserServer struct {
}

func (UnimplementedUserServer) GetUserById(context.Context, *GetUserByIdIn) (*GetUserOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserById not implemented")
}
func (UnimplementedUserServer) GetUserByEmail(context.Context, *GetUserByEmailIn) (*GetUserOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByEmail not implemented")
}
func (UnimplementedUserServer) GetUserByName(context.Context, *GetUserByNameIn) (*GetUserOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserByName not implemented")
}
func (UnimplementedUserServer) GetUserBySession(context.Context, *SessionIdIn) (*GetUserOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserBySession not implemented")
}
func (UnimplementedUserServer) RegisterUser(context.Context, *RegisterUserIn) (*GetUserOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterUser not implemented")
}
func (UnimplementedUserServer) UserLogin(context.Context, *LoginIn) (*SessionOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogin not implemented")
}
func (UnimplementedUserServer) UserLogOut(context.Context, *SessionIdIn) (*BoolOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserLogOut not implemented")
}
func (UnimplementedUserServer) UserDebugLog(context.Context, *LogsIn) (*BoolOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UserDebugLog not implemented")
}
func (UnimplementedUserServer) mustEmbedUnimplementedUserServer() {}

// UnsafeUserServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserServer will
// result in compilation errors.
type UnsafeUserServer interface {
	mustEmbedUnimplementedUserServer()
}

func RegisterUserServer(s grpc.ServiceRegistrar, srv UserServer) {
	s.RegisterService(&User_ServiceDesc, srv)
}

func _User_GetUserById_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserById(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/GetUserById",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserById(ctx, req.(*GetUserByIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByEmail_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByEmailIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByEmail(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/GetUserByEmail",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByEmail(ctx, req.(*GetUserByEmailIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserByName_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserByNameIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserByName(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/GetUserByName",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserByName(ctx, req.(*GetUserByNameIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_GetUserBySession_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).GetUserBySession(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/GetUserBySession",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).GetUserBySession(ctx, req.(*SessionIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_RegisterUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterUserIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).RegisterUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/RegisterUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).RegisterUser(ctx, req.(*RegisterUserIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLogin_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLogin(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserLogin",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLogin(ctx, req.(*LoginIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserLogOut_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SessionIdIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserLogOut(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserLogOut",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserLogOut(ctx, req.(*SessionIdIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _User_UserDebugLog_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LogsIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserServer).UserDebugLog(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/User/UserDebugLog",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserServer).UserDebugLog(ctx, req.(*LogsIn))
	}
	return interceptor(ctx, in, info, handler)
}

// User_ServiceDesc is the grpc.ServiceDesc for User service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var User_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "User",
	HandlerType: (*UserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserById",
			Handler:    _User_GetUserById_Handler,
		},
		{
			MethodName: "GetUserByEmail",
			Handler:    _User_GetUserByEmail_Handler,
		},
		{
			MethodName: "GetUserByName",
			Handler:    _User_GetUserByName_Handler,
		},
		{
			MethodName: "GetUserBySession",
			Handler:    _User_GetUserBySession_Handler,
		},
		{
			MethodName: "RegisterUser",
			Handler:    _User_RegisterUser_Handler,
		},
		{
			MethodName: "UserLogin",
			Handler:    _User_UserLogin_Handler,
		},
		{
			MethodName: "UserLogOut",
			Handler:    _User_UserLogOut_Handler,
		},
		{
			MethodName: "UserDebugLog",
			Handler:    _User_UserDebugLog_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "user.proto",
}
